import boto3
import json
from botocore.exceptions import ClientError
import datetime

class unreachableprimaryregion(Exception):
     def __init__(self, msg):
        self.msg = msg

primary_region = 'us-east-2'
secondary_region = 'us-east-1'
list_secrets_client = boto3.client('secretsmanager',region_name = primary_region)
try:
    s3 = boto3.client('s3',region_name= secondary_region)
    key_list_arn = []
    def replicate_secrets(event,context):
        #encryptionKey = 'arn:aws:kms:us-east-1:066491008591:key/efb2dd23-a5d4-4fc6-9512-1d5acfb8d349'
        altered_secrets_name = []
        unaltered_secrets_name = []
        view_secrets = list_secrets_client.list_secrets(
        MaxResults=100,
        SortOrder='asc'
        )
        number_of_secrets = len(view_secrets['SecretList'])
        for arn in range(number_of_secrets):
            key_list_arn.append(view_secrets['SecretList'][arn]['ARN'])
        if 'NextToken' in view_secrets:
            nextToken = view_secrets['NextToken']
            recursive_list_secrets(nextToken)
        for arnid in range(len(key_list_arn)):
            describe_secret = list_secrets_client.describe_secret(
                SecretId=key_list_arn[arnid]
            )
            #if (describe_secret['Name'] != 'MyRDSInstanceSecret-K00A1UWwPAEf' and describe_secret['Name'] != 'MyRDSInstanceSecret-5vz8T3yOlYTP'):
            if (describe_secret['Name'] != 'customsecret'):
                if 'ReplicationStatus' in describe_secret:
                    if (describe_secret['ReplicationStatus'][0]['Status']=='InSync'):
                        unaltered_secrets_name.append(describe_secret['Name'])
                    elif (describe_secret['ReplicationStatus'][0]['Status']=='Failed' or describe_secret['ReplicationStatus'][0]['Status']=='InProgress'):
                        replicate_secrets = list_secrets_client.replicate_secret_to_regions(
                        SecretId=key_list_arn[arnid],
                        AddReplicaRegions=[
                            {
                            'Region': secondary_region,
                            #'KmsKeyId':encryptionKey
                            },
                        ],
                        ForceOverwriteReplicaSecret=True
                        )
                        altered_secrets_name.append(describe_secret['Name'])
                else:
                    replicate_secrets = list_secrets_client.replicate_secret_to_regions(
                    SecretId=key_list_arn[arnid],
                    AddReplicaRegions=[
                    {
                        'Region': secondary_region,
                        #'KmsKeyId':encryptionKey
                    },
                    ],
                    ForceOverwriteReplicaSecret=True
                    )
                    altered_secrets_name.append(describe_secret['Name'])
        replicated_secrets_name = str(altered_secrets_name)
        datetimeobject = datetime.datetime.now()
        strDatetime= datetimeobject.strftime("%d-%m-%y %H:%M:%S")
        if (len(altered_secrets_name)==0):
            with open("/tmp/{}.txt".format(strDatetime),"w") as datum:
                datum.write('All Secrets are synced across the regions.')
        else:
            count_initial =0
            with open("/tmp/{}.txt".format(strDatetime),"w") as f:
                f.write("Lambda Function has initiated the cross region replication of the following Secrets from the Secrets Manager of Ohio Region to the Secondary Region: ")
            for secretname in range(len(altered_secrets_name)):
                count_initial +=1
                counter = str(count_initial)
                with open("/tmp/{}.txt".format(strDatetime),"a+") as data:
                    data.write("\n"+counter+". "+altered_secrets_name[secretname])
        count_final =0
        with open("/tmp/{}.txt".format(strDatetime),"a+") as dataset:
            dataset.write("\n\nFollowing are the details of the already existing cross-region enabled secrets:")
        for secretnames in range(len(unaltered_secrets_name)):
            count_final +=1
            counter = str(count_final)
            with open("/tmp/{}.txt".format(strDatetime),"a+") as dataset_final:
                dataset_final.write("\n"+counter+". "+unaltered_secrets_name[secretnames])
        # Check S3 bucket in PSCS-QA Environment on where to store the logs generated by the Lambda function
        s3.upload_file("/tmp/{}.txt".format(strDatetime),"customs3bucket96","Secrets-Replication-Report/SecretReplicationOutput-{}.txt".format(strDatetime))
        return {
            'statusCode': 200,
            'body': json.dumps('Lambda Function monitored all the secrets of the primary region.')
    }
except ClientError as e:
        raise unreachableprimaryregion("Unable to reach Secrets Manager of Primary Region")    
def recursive_list_secrets(nextToken):
    try:
        recursive_view_secrets = list_secrets_client.list_secrets(
        MaxResults=100,
        NextToken=nextToken,
        SortOrder='asc'
        )
        number_of_recursive_secrets = len(recursive_view_secrets['SecretList'])
        for arn in range(number_of_recursive_secrets):
            key_list_arn.append(recursive_view_secrets['SecretList'][arn]['ARN'])
        if 'NextToken' in recursive_view_secrets:
            recursive_list_secrets(recursive_view_secrets['NextToken'])
    except ClientError as e:
        raise unreachableprimaryregion("Unable to reach Secrets Manager of Primary Region")  